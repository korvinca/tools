#!/usr/bin/env groovy


pipeline {
  agent {  label env.SLAVE_LABEL }

  parameters {
      string(name: "project_VERSION", defaultValue: "latest", trim: true, description: "project Version")
//      string(name: "GIT_BRANCH", defaultValue: "feature/evermilu/CICD-364", trim: true, description: "Git Branch")
      string(name: "GIT_BRANCH", defaultValue: "develop", trim: true, description: "Git branch")
      string(name: "ENV_NAME", defaultValue: "$BUILD_NUMBER", trim: true, description: "project Environment Name")
      string(name: "HARNESS_PIPELINE", defaultValue: "Platform_Fresh_Install", trim: true, description: "Harness Pipeline")
      string(name: "HARNESS_PROJECT", defaultValue: "ORGContinuousDeployment", trim: true, description: "Harness Project")
      string(name: "HARNESS_INPUTSET", defaultValue: "platforminputset", trim: true, description: "Harness InputSet")
  }
  // environment {
  // }

  options {
    buildDiscarder(logRotator(numToKeepStr: '8'))
  }

  stages {

      stage('Run python script') {
          steps {
            	script {

                 withCredentials([string(
                    credentialsId: 'keeper_generic_vault_token',
                    variable: 'VAULT_TOKEN',
                    )]) {
                           sh """
                              cd tools/tools/vars-harness-inputsets
                              pip3 install --user -r requirements.txt
                              python3 ./maven-harness-vars.py \
                                 --harness-inputset "${params.HARNESS_INPUTSET}" \
                                 --harness-pipeline "${params.HARNESS_PIPELINE}" \
                                 --harness-project "${params.HARNESS_PROJECT}" \
                                 --version "${params.project_VERSION}" \
                                 --config config.yml \
                                 --env-name "${params.ENV_NAME}"
                            """
                      }
                  }
          }
      }
  }

  post {
      always {
        cleanWs()
      }
    }
}
